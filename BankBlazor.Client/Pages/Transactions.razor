@page "/transactions"
@using BankBlazor.Client.Services
@using BankBlazor.Shared.Models
@using BankBlazor.Shared.Dtos
@inject CustomerService CustomerService
@inject TransactionService TransactionService

<h1>Transaktioner</h1>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
@if (successMessage != null)
{
    <p class="text-success">@successMessage</p>
}

<EditForm Model="@transactionModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Från konto:</label>
        <InputSelect @bind-Value="transactionModel.FromAccountId" @onchange="OnFromAccountChanged">
            <option value="">-- Välj konto --</option>
            @foreach (var account in accounts)
            {
                <option value="@account.AccountId">@account.AccountId - Saldo: @account.Balance.ToString("C")</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Transaktionstyp:</label>
        <InputSelect @bind-Value="transactionModel.TransactionType">
            <option value="Deposit">Insättning</option>
            <option value="Withdraw">Uttag</option>
            <option value="Transfer">Överföring</option>
        </InputSelect>
    </div>

    @if (transactionModel.TransactionType == "Transfer")
    {
        <div>
            <label>Till konto:</label>
            <InputSelect @bind-Value="transactionModel.ToAccountId">
                <option value="">-- Välj mottagarkonto --</option>
                @foreach (var account in accounts)
                {
                    if (account.AccountId != transactionModel.FromAccountId)
                    {
                        <option value="@account.AccountId">@account.AccountId - Saldo: @account.Balance.ToString("C")</option>
                    }
                }
            </InputSelect>
        </div>
    }

    <div>
        <label>Belopp:</label>
        <InputNumber @bind-Value="transactionModel.Amount" />
    </div>

    <button type="submit">Genomför transaktion</button>
</EditForm>

@if (fromAccount != null)
{
    <p class="mt-3"><strong>Saldo för konto @fromAccount.AccountId:</strong> @fromAccount.Balance.ToString("C")</p>

    @if (transactions.Any())
    {
        <h3>Transaktionshistorik</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Typ</th>
                    <th>Belopp</th>
                    <th>Saldo efteråt</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tx in transactions.OrderByDescending(t => t.Date))
                {
                    <tr>
                        <td>@tx.Date.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@tx.Type</td>
                        <td>@tx.Amount.ToString("C")</td>
                        <td>@tx.BalanceAfter.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (transactionModel.TransactionType == "Transfer" && toAccount != null)
{
    <p><strong>Saldo för mottagarkonto @toAccount.AccountId:</strong> @toAccount.Balance.ToString("C")</p>
}

@code {
    private List<Account> accounts = new();
    private List<TransactionDto> transactions = new();
    private string? errorMessage;
    private string? successMessage;

    private TransactionInputModel transactionModel = new();

    private Account? fromAccount => accounts.FirstOrDefault(a => a.AccountId == transactionModel.FromAccountId);
    private Account? toAccount => accounts.FirstOrDefault(a => a.AccountId == transactionModel.ToAccountId);

    protected override async Task OnInitializedAsync()
    {
        accounts = await CustomerService.GetAccountsAsync();
    }

    private async Task OnFromAccountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int accountId))
        {
            transactionModel.FromAccountId = accountId;
            await LoadTransactions(accountId);
        }
        else
        {
            transactions.Clear();
        }
    }

    private async Task LoadTransactions(int accountId)
    {
        transactions = await CustomerService.GetTransactionsAsync(accountId);
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        successMessage = null;

        if (transactionModel.Amount <= 0)
        {
            errorMessage = "Beloppet måste vara större än noll.";
            return;
        }

        try
        {
            bool result = false;
            switch (transactionModel.TransactionType)
            {
                case "Deposit":
                    result = await TransactionService.DepositAsync(transactionModel.FromAccountId, transactionModel.Amount);
                    break;
                case "Withdraw":
                    result = await TransactionService.WithdrawAsync(transactionModel.FromAccountId, transactionModel.Amount);
                    break;
                case "Transfer":
                    if (transactionModel.ToAccountId == 0)
                    {
                        errorMessage = "Du måste välja mottagarkonto vid överföring.";
                        return;
                    }
                    result = await TransactionService.TransferAsync(transactionModel.FromAccountId, transactionModel.ToAccountId, transactionModel.Amount);
                    break;
                default:
                    errorMessage = "Ogiltig transaktionstyp.";
                    return;
            }

            if (result)
            {
                successMessage = "Transaktionen genomfördes!";
                accounts = await CustomerService.GetAccountsAsync();
                await LoadTransactions(transactionModel.FromAccountId);
                transactionModel = new TransactionInputModel();
            }
            else
            {
                errorMessage = "Transaktionen misslyckades.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fel vid transaktion: {ex.Message}";
        }
    }

    private class TransactionInputModel
    {
        public int FromAccountId { get; set; }
        public int ToAccountId { get; set; }
        public decimal Amount { get; set; }
        public string TransactionType { get; set; } = "Deposit";
    }
}
