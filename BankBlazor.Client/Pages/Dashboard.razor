@page "/dashboard"
@using BankBlazor.Shared.Dtos
@inject AccountService AccountService

<div class="container mt-4">
    <h1>Dashboard</h1>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (customers == null)
    {
        <p>Laddar kunder...</p>
    }
    else if (customers.Count == 0)
    {
        <p>Inga kunder hittades i databasen.</p>
    }
    else
    {
        <div class="row">
            <div class="col-md-4 mb-3">
                <h3>Kunder</h3>
                <ul class="list-group">
                    @foreach (var customer in customers)
                    {
                        <li class="list-group-item @(selectedCustomer?.CustomerId == customer.CustomerId ? "active" : "")"
                            style="cursor:pointer"
                            @onclick="() => SelectCustomer(customer)">
                            @customer.FullName (ID: @customer.CustomerId)
                        </li>
                    }
                </ul>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(_page == 1)">Föregående</button>
                    <span>Sida @_page</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(customers.Count < _pageSize)">Nästa</button>
                </div>
            </div>

            <div class="col-md-8">
                @if (selectedCustomer == null)
                {
                    <p>Välj en kund för att se konton.</p>
                }
                else
                {
                    <h3>Konton för @selectedCustomer.FullName</h3>
                    @if (selectedCustomer.Accounts == null || selectedCustomer.Accounts.Count == 0)
                    {
                        <p>Inga konton för denna kund.</p>
                    }
                    else
                    {
                        <table class="table table-striped table-hover">
                            <thead class="table-primary">
                                <tr>
                                    <th>AccountId</th>
                                    <th>AccountType</th>
                                    <th>Balance</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var account in selectedCustomer.Accounts)
                                {
                                    <tr>
                                        <td>@account.AccountId</td>
                                        <td>@account.AccountType</td>
                                        <td>@account.Balance.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    private List<CustomerWithAccountsDto>? customers;
    private CustomerWithAccountsDto? selectedCustomer;
    private string? errorMessage;

    private int _page = 1;
    private int _pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await AccountService.GetCustomersWithAccountsAsync(_page, _pageSize);
            selectedCustomer = null;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Fel vid hämtning av kunder: {ex.Message}";
        }
    }

    private void SelectCustomer(CustomerWithAccountsDto customer)
    {
        selectedCustomer = customer;
    }

    private async Task PreviousPage()
    {
        if (_page > 1)
        {
            _page--;
            await LoadCustomers();
        }
    }

    private async Task NextPage()
    {
        if (customers != null && customers.Count == _pageSize)
        {
            _page++;
            await LoadCustomers();
        }
    }
}
